# Docker Compose configuration for production environment
version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: crypto-pulse-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: crypto_pulse_v3
      POSTGRES_USER: ${POSTGRES_USER:-cryptopulse}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - crypto-pulse-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cryptopulse} -d crypto_pulse_v3"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: crypto-pulse-redis-prod
    restart: always
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_prod_data:/data
    networks:
      - crypto-pulse-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: crypto-pulse-app-prod
    restart: always
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-cryptopulse}:${POSTGRES_PASSWORD}@postgres:5432/crypto_pulse_v3
      REDIS_URL: redis://redis:6379/0
      
      # Production Settings
      ENVIRONMENT: production
      LOG_LEVEL: INFO
      
      # API Keys (from environment)
      BINANCE_API_KEY: ${BINANCE_API_KEY}
      BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY}
      ALPACA_API_KEY: ${ALPACA_API_KEY}
      ALPACA_SECRET_KEY: ${ALPACA_SECRET_KEY}
      PERPLEXITY_API_KEY: ${PERPLEXITY_API_KEY}
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
      
      # Notifications
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID}
      ENABLE_NOTIFICATIONS: ${ENABLE_NOTIFICATIONS:-true}
    
    ports:
      - "8000:8000"
    
    volumes:
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
      - backtest_prod_cache:/app/backtest_cache
    
    networks:
      - crypto-pulse-network
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "python", "/app/src/monitoring/health_check.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Database Migration Service (runs once)
  db-migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: crypto-pulse-migrate-prod
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-cryptopulse}:${POSTGRES_PASSWORD}@postgres:5432/crypto_pulse_v3
    command: ["python", "scripts/init_db.py"]
    networks:
      - crypto-pulse-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  # Monitoring Service
  monitoring:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: crypto-pulse-monitoring-prod
    restart: always
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-cryptopulse}:${POSTGRES_PASSWORD}@postgres:5432/crypto_pulse_v3
      REDIS_URL: redis://redis:6379/0
      ENVIRONMENT: production
    command: ["python", "-m", "src.monitoring.dashboard"]
    ports:
      - "3000:3000"
    networks:
      - crypto-pulse-network
    depends_on:
      - app
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  backtest_prod_cache:
    driver: local

networks:
  crypto-pulse-network:
    driver: bridge
