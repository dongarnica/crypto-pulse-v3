version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: crypto-pulse-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: crypto_pulse_v3
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    networks:
      - crypto-pulse-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d crypto_pulse_v3"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: crypto-pulse-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - crypto-pulse-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto-pulse-app
    restart: unless-stopped
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/crypto_pulse_v3
      REDIS_URL: redis://redis:6379/0
      
      # API Keys (from .env file)
      BINANCE_API_KEY: ${BINANCE_API_KEY}
      BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY}
      ALPACA_API_KEY: ${ALPACA_API_KEY}
      ALPACA_SECRET_KEY: ${ALPACA_SECRET_KEY}
      PERPLEXITY_API_KEY: ${PERPLEXITY_API_KEY}
      
      # Trading Configuration
      ENVIRONMENT: development
      MAX_PORTFOLIO_ALLOCATION: 0.15
      MIN_PORTFOLIO_ALLOCATION: 0.08
      MAX_DRAWDOWN_THRESHOLD: 0.15
      
      # Risk Management
      ATR_STOP_MULTIPLIER: 3.5
      MAX_CORRELATION_THRESHOLD: 0.7
      MAX_SECTOR_EXPOSURE: 0.4
      
      # System Configuration
      LOG_LEVEL: INFO
      ANALYSIS_INTERVAL_MINUTES: 30
      SENTIMENT_INTERVAL_HOURS: 2
      
      # API Server
      API_HOST: 0.0.0.0
      API_PORT: 8000
      
      # Performance Targets
      TARGET_ANNUAL_RETURN: 0.28
      TARGET_SHARPE_RATIO: 1.8
      TARGET_WIN_RATE: 0.65
      TARGET_PROFIT_FACTOR: 2.2
      
      # Notification Settings
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN:-development_telegram_token}
      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID:-development_chat_id}
      ENABLE_NOTIFICATIONS: false
    
    ports:
      - "8000:8000"
    
    volumes:
      - ./logs:/app/logs
      - ./backtest_cache:/app/backtest_cache
      - ./data:/app/data
    
    networks:
      - crypto-pulse-network
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Migration Service (runs once)
  db-migrate:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto-pulse-migrate
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/crypto_pulse_v3
    command: ["python", "scripts/init_db.py"]
    networks:
      - crypto-pulse-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  # Advanced Backtesting Service (optional)
  backtesting:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto-pulse-backtesting
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/crypto_pulse_v3
      REDIS_URL: redis://redis:6379/0
    command: ["python", "-m", "src.backtesting.standalone"]
    volumes:
      - ./backtest_cache:/app/backtest_cache
      - ./logs:/app/logs
    networks:
      - crypto-pulse-network
    depends_on:
      - app
    profiles:
      - backtesting
    restart: unless-stopped

  # Monitoring Dashboard (optional)
  monitoring:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto-pulse-monitoring
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/crypto_pulse_v3
      REDIS_URL: redis://redis:6379/0
    command: ["python", "-m", "src.monitoring.dashboard"]
    ports:
      - "3000:3000"
    networks:
      - crypto-pulse-network
    depends_on:
      - app
    profiles:
      - monitoring
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  crypto-pulse-network:
    driver: bridge
